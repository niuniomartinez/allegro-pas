* Unit algl:

  I've find that most people dislikes Allegro.pas just because it hasn't 3D
  stuff, so unit algl (it means "Allegro OpenGL") is my current priority.
  Current algl unit doesn't work properly and may be there's a conflict loading
  the libraries (FPC loads OpenGL library in run-time) so I'll rewrite it using
  AllegroGL as reference.

  I'll implement the most basic functions and procedures just to initialize the
  OpenGL context, including double buffer and z-buffer, and allowing to use
  some of the Allegro's drawing primitives (line, rectfill and few more) to
  draw in plane f(x, y, 0).  Then I'll add more functionality if nobody else
  does it (upload an AL_BITMAP object as texture, set an orthogonal-per-pixel
  mode to draw primitives on the screen AKA "Allegro drawing mode", use
  al_textout_ex to draw text, etc.).

* Tools

  + GUI creator:  Simple drag'n'drop editor using Allegro's GUI.  Save GUIs
    as text files (may be XML?) and as Pascal unit.

* Rotate sprite/bitmap

  Just make it run, even if it's "ugly".

* UNICODE

  Actually supported but there's some problems with it.  Should find a way to
  integrate it with FPC/Lazarus UNICODE support (i.e. utf8string, etc.)

* Examples & documentation

  The idea is to complete the documentation specially adding more "See also"
  sections and some code snipets in some parts.

  Also more examples, specially one or two to show how to integrate Allegro.pas
  in Lazarus projects and may be others.

* New installation system via fpmake and/or fpcmake.
