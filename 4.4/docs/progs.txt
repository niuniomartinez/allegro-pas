@shorttitle(Examples, tools and demo game)
@title(Examples, tools and demonstration game)

@section(1 indice Contents)

  @unorderedList(
    @item(@bold(@link(examples Examples)))
    @item(@bold(@link(tools Tools)))
    @item(@bold(@link(demo Demonstration game)))
  )

@section(1 examples Examples)

  On the @code(examples) subdirectory there are several simple example programs
  that explains how to use Allegro.pas in specific cases.  Here you have a list
  with all examples ordered by complexity (most simple first):

  @section(2 exblend.pp exblend.pp)

  This program demonstrates how to use the translucency functions in truecolor
  video modes.  Two image files are loaded from disk and displayed moving
  slowly around the screen.  One of the images will be tinted to different
  colors.  The other image will be faded out with a varying alpha strength, and
  drawn on top of the other image.

  @bold(See also:) @link(alblend)

  @section(2 excolmap.pp excolmap.pp)

  This program demonstrates how to create custom graphic effects with the
  @link(al_create_color_table) function.  Allegro drawing routines are affected
  by any color table you might have set up.  In the first part of this example,
  a greyscale color table is set.  The result is that a simple rectfill call,
  instead of drawing a rectangle with color zero, uses the already drawn pixels
  to determine the pixel to be drawn (read the comment of
  @code(ReturnGreyColor) for a precise description of the algorithm).  In the
  second part of the test, the color table is changed to be an inverse table,
  meaning that any pixel drawn will be shown as its color values had been
  inverted.

  @bold(See also:) @link(AL_BITMAP) @link(AL_COLOR_MAP) @link(al_color_table)

  @section(2 exdata.pp exdata.pp)

  This program demonstrates how to access the contents of an Allegro datafile
  (created by the @link(grabber) utility).  The example loads the file
  @code(example.dat), then blits a bitmap and shows a font, both from this
  datafile.

  @bold(See also:) @link(alfile)

  @section(2 exdbuf.pp exdbuf.pp)

  This program demonstrates the use of double buffering.  It moves a circle
  across the screen, first just erasing and redrawing directly to the screen,
  then with a double buffer.

  @bold(See also:) @link(AL_BITMAP) @link(al_blit)

  @section(2 exfixed.pp exfixed.pp)

  This program demonstrates how to use fixed point numbers, which are signed
  32-bit integers storing the integer part in the upper 16 bits and the decimal
  part in the 16 lower bits.  This example also uses the unusual approach of
  communicating with the user exclusively via the @link(al_message) function.

  @bold(See also:) @link(alfixed)

  @section(2 exgui.pp exgui.pp)

  This program demonstrates how to use the GUI routines. From the simple dialog
  controls that display a text or a bitmap to more complex multiple choice
  selection lists, Allegro provides a framework which can be customised to suit
  your needs.

  @bold(See also:) @link(algui)

  @section(2 exhello.pp exhello.pp)

  This is a very simple program showing how to get into graphics mode and draw
  text onto the screen.

  @bold(See also:) @link(al_init) @link(al_set_color_depth)
  @link(al_set_gfx_mode) @link(al_message)
  @link(al_textout_ex) @link(al_install_keyboard) @link(al_readkey)
  @link(al_set_palette) @link(al_exit)

  @section(2 exhsvrgb.pp exhsvrgb.pp)

  Translating HSV space -> RGB values.

  @bold(See also:) @link(al_hsv_to_rgb) @link(al_rgb_to_hsv)

  @section(2 exkeys.pp exkeys.pp)

  This program demonstrates how to access the keyboard.  The first part shows
  the basic use of @link(al_readkey).  The second part shows how to extract the
  ASCII value.  Next come the scan codes.  The fourth test detects modifier
  keys like alt or shift.  The fifth test requires some focus to be passed.
  The final step shows how to use the global @link(al_key) array to read
  simultaneous key presses.  The last method to detect key presses are keyboard
  callbacks.  This is demonstrated by installing a keyboard callback, which
  marks all pressed keys by drawing to a grid.

  @bold(See also:) @link(al_install_keyboard)

  @section(2 exmouse.pp exmouse.pp)

  This program demonstrates how to get mouse input.  The first part of the test
  retrieves the raw mouse input data and displays it on the screen without
  using any mouse cursor.  When you press a key the standard arrow-like mouse
  cursor appears.  You are not restricted to this shape, and a second key press
  modifies the cursor to be several concentric colored circles.  They are not
  joined together, so you can still see bits of what's behind when you move the
  cursor over the printed text message.

  @bold(See also:) @link(al_install_mouse) @link(al_set_mouse_sprite)
  @link(al_show_mouse)

  @section(2 expal.pp expal.pp)

  This program demonstrates how to manipulate the palette. It draws a set of
  concentric circles onto the screen and animates them by cycling the palette.

  @bold(See also:) @link(al_set_palette)

  @section(2 expat.pp expat.pp)

  This program demonstrates the use of patterned drawing and sub-bitmaps.

  @bold(See also:) @link(al_drawing_mode)

  @section(2 exsprite.pp exsprite.pp)

  This example demonstrates how to use datafiles, various sprite drawing
  routines and flicker-free animation.

  Why is the @code(Animate) routine coded in that way?  As you probably know,
  VIDEO RAM is much slower than "normal" RAM, so it's advisable to reduce VRAM
  blits to a minimum.  Drawing sprite on the screen (meaning in VRAM) and then
  clearing a background for it is not very fast.  This example uses a different
  method which is much faster, but require a bit more memory.

  First the buffer is cleared (it's a normal @link(AL_BITMAP)), then the sprite
  is drawn on it, and when the drawing is finished this buffer is copied
  directly to the screen.  So the end result is that there is a single VRAM
  blit instead of blitting/clearing the background and drawing a sprite on it.
  It's a good method even when you have to restore the background.  And of
  course, it completely removes any flickering effect.

  When one uses a big (ie. 800x600 background) and draws something on it, it's
  wise to use a copy of background somewhere in memory and restore background
  using this "virtual background".  When blitting from VRAM in SVGA modes, it's
  probably, that drawing routines have to switch banks on video card.  I think,
  I don't have to remind how slow is it.

  Note that on modern systems, the above isn't true anymore, and you usually
  get the best performance by caching all your animations in video ram and
  doing only VRAM->VRAM blits, so there is no more RAM->VRAM transfer at all
  anymore.  And usually, such transfers can run in parallel on the graphics
  card's processor as well, costing virtually no main cpu time at all.  See
  the exaccel example for an example of this.

  @bold(See also:) @link(al_draw_sprite)

  @section(2 exsyscur.pp exsyscur.pp)

  This program demonstrates the use of hardware accelerated mouse cursors.

  @bold(See also:) @link(al_enable_hardware_cursor) @link(al_gfx_capabilities)
  @link(al_select_mouse_cursor)

  @section(2 extrans.pp extrans.pp) Lighting and translucency effects.)

  This program demonstrates how to use the lighting and translucency functions.
  The first part of the example will show a dark screen illuminated by a
  spotlight you can move with your mouse.  After a key press the example shows
  the full bitmap and the spotlight changes to be a reduced version of the
  background with 50% of translucency.

  The translucency effect is easy to do in all color depths.  However, the
  lighting effect has to be performed in a different way depending on whether
  the screen is in 8bit mode or another color depth.  This is because additive
  drawing mode uses a different set of routines for truecolor modes.

  @bold(See also:) @link(alvga) @link(alblend)

  @section(2 extruec.pp extruec.pp)

  This program shows how to specify colors in the various different truecolor
  pixel formats.  The example shows the same screen (a few text lines and three
  coloured gradients) in all the color depth modes supported by your video
  card.  The more color depth you have, the less banding you will see in the
  gradients.

  @bold(See also:) @link(al_generate_332_palette) @link(al_makecol)
  @link(al_set_palette)

  @section(2 lazarus/)

  How to use Allegro.pas inside Lazarus applications.



@section(1 tools Tools)

@section(2 grabber Grabber)

@section(1 demo Demonstration game)

