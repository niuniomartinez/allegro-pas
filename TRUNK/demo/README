Instructions
------------

  Help Alex the Allegator to get the coins and find the exit of the level.

  Use left and right cursor keys or the joystick to move Alex.  Use the space
  bar or the joystick 'A' button to jump.



About this demo
---------------

  This game is a demonstration of the Allegro.pas library.  Its goal is to
  create a good piece of code to show how to write your games using
  Allegro.pas.

  See the sources and read the documentation.  On the bottom of this README
  file there are a section that explains how you can use the game engine in
  your own projects.



Credits
-------

  Original game concept:
    Ken Silverman (http://www.advsys.net/ken/)

  Game programming:
    Ñuño Martínez (http://www.burdjia.com/)

  Alex the Allegator character courtesy from:
    Johan Peitz (http://www.freelunchdesign.com/)

  Title music:
    Garret Thomsom (g@sirsonic.com)(ripped from the original Allegro demo game)

  Game music:
    Partners In Rhyme (http://www.partnersinrhyme.com/)

  Sound FX:
    Ripped from Shawn Hargreaves and Johan Peitz's games.

  Allegro originally created by Shawn Hargreaves (http://talula.demon.co.uk/)
  and currently mantained by the Allegro Development Team
  (http://alleg.sourceforge.net)

  Allegro.pas:
    Ñuño Martínez (again...)

  Thanks to:
    the Spanish Delphi community (http://www.clubdelphi.net/)
    the Free Pascal community (http://www.freepascal.org/)
    the Pascal Game Development community (http://www.pascalgamedevelopment.com/)
    and the Allegro community (http://www.allegro.cc/)



How to use the game engine and the map editor in your projects
--------------------------------------------------------------

  Both game engine and map editor were designed to be a good base for your own
  game projects.

  The game engine is formed by two units:  tilemap.pas and sprites.pas.  They
  have functions and procedures to load maps, animate objects, calculate
  collisions and draw it to the screen.  Both units have a lot of comments so
  it should be easy to know how to use them.

  To know how to use the map editor read mapedit.txt file.  The mapedit program
  is quite flexible but you'll need to modify it a bit if you want to use it as
  map editor in your own games.

  The biggest change will be procedure SetTileset wich asigns the Tileset
  array.  This procedure is designed to be used by the Allegro.pas'
  demonstration game so you *should* modify it to load the tileset your game
  uses.  May be you want to add a menu option to load different tilesets.  If
  so you should pay atention to variable "CanDrawMap" (at the end of procedure
  SetTileset) because if you allow to the map editor to draw a map with the
  wrong tileset then the application may die with an error.  Remember that you
  can assign up to 253 tiles, as tiles 0, 254 and 255 are reserved.  Read
  comments at tilemap.pas and mapedit.pp for more information.

  To change tile size just change const TSIZE from tilemap.pas.  To change
  editor buttons size you should change constant BTN_SIZE, but it might be more
  complex (actually I didn't test it).

  Mapedit doesn't allow to set sprites on map, so you should reserve several
  tiles for this.  In your game you should check the tilemap looking for these
  reserved tiles to know where to put the sprites.  Look at function LoadMapPf
  how it does find start and end points, your code should be alike.

  Anyway, before to start your own project take your time to read sources of
  demonstration game and mapedit, as well as the programs at the "examples"
  subdirectory.  Once you learn how does Allegro.pas works and how to use
  the engine it should be easy to create your own masterpieces.
